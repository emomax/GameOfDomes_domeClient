# Copyright Linkoping University 2011
# SGCT Project Authors see Authors.txt

cmake_minimum_required(VERSION 2.8)
SET(APP_NAME GameOfDomes)

SET(CMAKE_DEBUG_POSTFIX "d" CACHE STRING "add a postfix, usually d on windows")
SET(CMAKE_RELEASE_POSTFIX "" CACHE STRING "add a postfix, usually empty on windows")

PROJECT(${APP_NAME})

add_executable(${APP_NAME}
	main.cpp)
	
set(EXAMPE_TARGET_PATH ${PROJECT_SOURCE_DIR})
set(EXECUTABLE_OUTPUT_PATH ${EXAMPE_TARGET_PATH})
	
set_target_properties(${APP_NAME} PROPERTIES
	RUNTIME_OUTPUT_DIRECTORY_DEBUG ${EXAMPE_TARGET_PATH}
	RUNTIME_OUTPUT_DIRECTORY_RELEASE ${EXAMPE_TARGET_PATH}
)
	
if( APPLE  )
	set(CMAKE_OSX_ARCHITECTURES "x86_64")
	if(CMAKE_GENERATOR STREQUAL Xcode)
		set(CMAKE_OSX_DEPLOYMENT_TARGET "10.9")
	endif()
endif()
	
find_library(SGCT_RELEASE_LIBRARY
	NAMES sgct libsgct REQUIRED)
find_library(SGCT_DEBUG_LIBRARY 
	NAMES sgctd libsgctd REQUIRED)
find_library(SMARTFOXCLIENT_RELEASE_LIBRARY
	NAMES SmartFoxClientLib REQUIRED)
find_library(SMARTFOXCLIENT_DEBUG_LIBRARY
	NAMES SmartFoxClientLib REQUIRED)
find_library(OPENAL_LIBRARY
	NAMES OpenAL32 REQUIRED)
	
find_library(LIBBOOST_CHRONO_DEBUG
	NAMES libboost_chrono REQUIRED)
find_library(LIBBOOST_CHRONO_RELEASE
	NAMES libboost_chrono REQUIRED)
find_library(LIBBOOST_DATETIME_DEBUG
	NAMES libboost_chrono REQUIRED)
find_library(LIBBOOST_DATETIME_RELEASE
	NAMES libboost_chrono REQUIRED)
find_library(LIBBOOST_REGEX_DEBUG
	NAMES libboost_chrono REQUIRED)
find_library(LIBBOOST_REGEX_RELEASE
	NAMES libboost_chrono REQUIRED)
find_library(LIBBOOST_SYSTEM_DEBUG
	NAMES libboost_chrono REQUIRED)
find_library(LIBBOOST_SYSTEM_RELEASE
	NAMES libboost_chrono REQUIRED)
find_library(LIBBOOST_THREAD_DEBUG
	NAMES libboost_chrono REQUIRED)
find_library(LIBBOOST_THREAD_RELEASE
	NAMES libboost_chrono REQUIRED)

if( WIN32 )
	find_path(SGCT_INCLUDE_DIRECTORY 
		NAMES sgct
		PATHS $ENV{SGCT_ROOT_DIR}/include NO_DEFAULT_PATH
		REQUIRED)
	find_path(SMARTFOXCLIENT_DIRECTORY
		NAMES trunk_api
		PATHS $ENV{SMARTFOXCLIENT_ROOT_DIR} NO_DEFAULT_PATH
		REQUIRED)
	find_path(OPENAL_INCLUDE_DIRECTORY
		NAMES OpenAL32
		PATHS $ENV{OPENAL32_ROOT_DIR} NO_DEFAULT_PATH
		REQUIRED
	)
	find_path(BOOST_ASIO_WINDOWS_DIRECTORY
		NAMES Windows
		PATHS $ENV{BOOST_ASIO_WINDOWS_DIRECTORY} NO_DEFAULT_PATH
		REQUIRED
	)
else()
	find_path(SGCT_INCLUDE_DIRECTORY 
		NAMES sgct
		PATH_SUFFIXES sgct
		PATHS $ENV{SGCT_ROOT_DIR}/include
		REQUIRED)
	find_path(SMARTFOXCLIENT_DIRECTORY
		NAMES SmartFox
		PATH_SUFFIXES SmartFox
		PATHS $ENV{SMARTFOXCLIENT_ROOT_DIR} NO_DEFAULT_PATH
		REQUIRED)
	find_path(OPENAL_INCLUDE_DIRECTORY
		NAMES OpenAL32
		PATH_SUFFIXES OpenAL32
		PATHS $ENV{OPENAL32_ROOT_DIR} NO_DEFAULT_PATH
		REQUIRED)
endif()
	
set(SGCT_LIBS
	debug ${SGCT_DEBUG_LIBRARY}
	optimized ${SGCT_RELEASE_LIBRARY}
)

set(SMARTFOXCLIENT_LIBS
	debug ${SMARTFOXCLIENT_DEBUG_LIBRARY}
	optimized ${SMARTFOXCLIENT_RELEASE_LIBRARY}
)

set(OPENAL_LIBS
	debug ${OPENAL_LIBRARY}
	optimized ${OPENAL_LIBRARY}
)

set(BOOST_ASIO_WINDOWS_LIBS	
	debug ${LIBBOOST_CHRONO_DEBUG}
	optimized ${LIBBOOST_CHRONO_RELEASE}
	
	debug ${LIBBOOST_DATETIME_DEBUG}
	optimized ${LIBBOOST_DATETIME_RELEASE}
	
	debug ${LIBBOOST_REGEX_DEBUG}
	optimized ${LIBBOOST_REGEX_RELEASE}
	
	debug ${LIBBOOST_SYSTEM_DEBUG}
	optimized ${LIBBOOST_SYSTEM_RELEASE}
	
	debug ${LIBBOOST_THREAD_DEBUG}
	optimized ${LIBBOOST_THREAD_RELEASE}
) 

find_package(OpenGL REQUIRED)
find_package(OpenSceneGraph REQUIRED osgUtil osgDB osgGA osgViewer)

include_directories(${SGCT_INCLUDE_DIRECTORY}
	${OPENSCENEGRAPH_INCLUDE_DIRS}
	${SMARTFOXCLIENT_DIRECTORY}
	${OPENAL_INCLUDE_DIRECTORY}
	${BOOST_ASIO_WINDOWS_DIRECTORY}
)


if( MSVC )
	set(LIBS
		${SGCT_LIBS}
		${OPENSCENEGRAPH_LIBRARIES}
		${OPENGL_LIBRARY}
		${SMARTFOXCLIENT_LIBS}
		${OPENAL_LIBS}
		${BOOST_ASIO_WINDOWS_LIBS}
		ws2_32
	)
elseif( WIN32 ) #MINGW or similar
	set(LIBS
		${SGCT_LIBS}
		${OPENSCENEGRAPH_LIBRARIES}
		${OPENGL_LIBRARY}
		ws2_32
	)
elseif( APPLE )
	find_library(COCOA_LIBRARY Cocoa REQUIRED)
	find_library(IOKIT_LIBRARY IOKit REQUIRED)
	find_library(COREVIDEO_LIBRARY CoreVideo REQUIRED)

	set(LIBS
		${SGCT_LIBS}
		${OPENSCENEGRAPH_LIBRARIES}
		${OPENGL_LIBRARY}
		${COCOA_LIBRARY}
		${IOKIT_LIBRARY}
		${COREVIDEO_LIBRARY}
	)
else() #linux
	find_library(X11_LIBRARY X11 REQUIRED)
	find_library(XRANDR_LIBRARY Xrandr REQUIRED)
	find_library(XI_LIBRARY Xi REQUIRED)
	find_library(XXF86VM_LIBRARY Xxf86vm)
	find_library(PTHREAD pthread REQUIRED)	

	set(LIBS
		${SGCT_LIBS}
		${OPENSCENEGRAPH_LIBRARIES}
		${OPENGL_LIBRARY}
		${X11_LIBRARY}
		${XRANDR_LIBRARY}
		${XI_LIBRARY}
		${XXF86VM_LIBRARY}
		${PTHREAD}
	)
endif()

if( MSVC )
	#set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /LTCG")
	
		if( "${MSVC_VERSION}" LESS 1600 ) #less than visual studio 2010
		STRING(REPLACE "INCREMENTAL:YES" "INCREMENTAL:NO" replacementFlags
			${CMAKE_EXE_LINKER_FLAGS_DEBUG})
		SET(CMAKE_EXE_LINKER_FLAGS_DEBUG "${replacementFlags}" )
		
		STRING(REPLACE "INCREMENTAL:YES" "INCREMENTAL:NO" replacementFlags
			${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO})
		SET(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO "${replacementFlags}" )
	else()
		STRING(REPLACE "INCREMENTAL" "INCREMENTAL:NO" replacementFlags
			${CMAKE_EXE_LINKER_FLAGS_DEBUG})
		SET(CMAKE_EXE_LINKER_FLAGS_DEBUG "${replacementFlags}" )
		
		STRING(REPLACE "INCREMENTAL" "INCREMENTAL:NO" replacementFlags
			${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO})
		SET(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO "${replacementFlags}" )
	endif()
	
	#MESSAGE(STATUS "flags: ${CMAKE_EXE_LINKER_FLAGS_DEBUG}")
endif()
	
if(MSVC AND NOT "${MSVC_VERSION}" LESS 1400)
	add_definitions( "/MP" )
endif()

if( WIN32 )
	add_definitions(-D__WIN32__)
	if( MINGW )
		set(CMAKE_CXX_FLAGS "-std=c++0x ${CMAKE_CXX_FLAGS}")
	endif()
elseif( APPLE  )
	add_definitions(-D__APPLE__)
	set(CMAKE_CXX_FLAGS "-std=c++11 -stdlib=libstdc++ ${CMAKE_CXX_FLAGS}")
else()
	add_definitions(-D__LINUX__)
	set(CMAKE_CXX_FLAGS "-std=c++11 ${CMAKE_CXX_FLAGS}")
endif()
	
if( CMAKE_COMPILER_IS_GNUCXX )
	set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -static-libgcc -static-libstdc++ -s")
endif()

target_link_libraries(${APP_NAME} ${LIBS})